openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: Get dummy/fake JSON data to use as placeholder in development or in prototype testing.
    url: https://dummyjson.com/
info:
  version: "1.0.0"
  title: DummyJSON
  description: |
    The API for all the DummyJSON!
    
    All Data comes from dummyjson.com
    
    ![dummyjson.png](https://dummyjson.com/)
paths:
  /products/:
    post:
      tags:
        - products
      summary: Legt ein neues product an.
      description: |
        Mit dieser Operation wird ein neues **product** angelegt.
      requestBody:
        $ref: "./product.yaml#/components/requestBodies/product"
      responses:
        200:
          description: Created
    get:
      tags:
        - products
      summary: Liefert eine Liste von products zurück.
      parameters:
        - limit:
          $ref: './product.yaml#/components/parameters/limit'
        - select:
          $ref: './product.yaml#/components/parameters/select'
      responses:
        200:
          $ref: './product.yaml#/components/responses/product'

  /products/{productId}:
    get:
      tags:
        - products
      summary: Liefert ein product anhand seiner ID zurück.
      parameters:
        - $ref: './product.yaml#/components/parameters/product'
      responses:
        200:
          $ref: './product.yaml#/components/responses/product'
    put:
      tags:
        - products
      summary: Ändert ein product anhand seiner ID.
      requestBody:
        $ref: "./product.yaml#/components/requestBodies/product"
      parameters:
        - $ref: './product.yaml#/components/parameters/product'
      responses:
        200:
          $ref: './product.yaml#/components/responses/product'
    delete:
      tags:
        - products
      summary: Löscht ein product anhand seiner ID.
      parameters:
        - $ref: './product.yaml#/components/parameters/product'
      responses:
        200:
          $ref: './product.yaml#/components/responses/product'
  /carts/:
    post:
      tags:
        - Cart
      summary: Legt ein neues Cart an.
      requestBody:
        $ref: "./cart.yaml#/components/requestBodies/cart"
      responses:
        200:
          description: Created
  /carts/{cartId}:
    get:
      tags:
        - Cart
      summary: Liefert ein Cart anhand seiner ID zurück.
      parameters:
        - $ref: './cart.yaml#/components/parameters/cart'
      responses:
        200:
          $ref: './cart.yaml#/components/responses/cart'
    put:
      tags:
        - Cart
      summary: Ändert ein cart anhand seiner ID.
      requestBody:
        $ref: "./cart.yaml#/components/requestBodies/cart"
      parameters:
        - $ref: './cart.yaml#/components/parameters/cart'
      responses:
        200:
          $ref: './cart.yaml#/components/responses/cart'
    delete:
      tags:
        - Cart
      summary: Löscht ein cart anhand seiner ID.
      parameters:
        - $ref: './cart.yaml#/components/parameters/cart'
      responses:
        200:
          $ref: './cart.yaml#/components/responses/cart'
components:
  schemas:
    cart:
      $ref: "./cart.yaml#/components/schemas/cart"
    product:
      $ref: "./product.yaml#/components/schemas/product"